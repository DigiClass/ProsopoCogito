/**
 * This class is generated by jOOQ
 */
package models.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import models.generated.DefaultSchema
import models.generated.Keys
import models.generated.tables.records.DocumentRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object Document {

	/**
	 * The reference instance of <code>document</code>
	 */
	val DOCUMENT = new Document
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class Document(alias : String, aliased : Table[DocumentRecord], parameters : Array[ Field[_] ]) extends TableImpl[DocumentRecord](alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[DocumentRecord] = {
		classOf[DocumentRecord]
	}

	/**
	 * The column <code>document.id</code>.
	 */
	val ID : TableField[DocumentRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>document.owner</code>.
	 */
	val OWNER : TableField[DocumentRecord, String] = createField("owner", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document.author</code>.
	 */
	val AUTHOR : TableField[DocumentRecord, String] = createField("author", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>document.title</code>.
	 */
	val TITLE : TableField[DocumentRecord, String] = createField("title", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document.date_numeric</code>.
	 */
	val DATE_NUMERIC : TableField[DocumentRecord, Timestamp] = createField("date_numeric", org.jooq.impl.SQLDataType.TIMESTAMP, "")

	/**
	 * The column <code>document.date_freeform</code>.
	 */
	val DATE_FREEFORM : TableField[DocumentRecord, String] = createField("date_freeform", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>document.description</code>.
	 */
	val DESCRIPTION : TableField[DocumentRecord, String] = createField("description", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>document.source</code>.
	 */
	val SOURCE : TableField[DocumentRecord, String] = createField("source", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>document.language</code>.
	 */
	val LANGUAGE : TableField[DocumentRecord, String] = createField("language", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * Create a <code>document</code> table reference
	 */
	def this() = {
		this("document", null, null)
	}

	/**
	 * Create an aliased <code>document</code> table reference
	 */
	def this(alias : String) = {
		this(alias, models.generated.tables.Document.DOCUMENT, null)
	}

	private def this(alias : String, aliased : Table[DocumentRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[DocumentRecord] = {
		Keys.PK_DOCUMENT
	}

	override def getKeys : List[ UniqueKey[DocumentRecord] ] = {
		return Arrays.asList[ UniqueKey[DocumentRecord] ](Keys.PK_DOCUMENT)
	}

	override def getReferences : List[ ForeignKey[DocumentRecord, _] ] = {
		return Arrays.asList[ ForeignKey[DocumentRecord, _] ](Keys.FK_DOCUMENT_USER_1)
	}

	override def as(alias : String) : Document = {
		new Document(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : Document = {
		new Document(name, null)
	}
}
