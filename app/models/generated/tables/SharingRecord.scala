/**
 * This class is generated by jOOQ
 */
package models.generated.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.time.OffsetDateTime
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import models.generated.DefaultSchema
import models.generated.Keys
import models.generated.tables.records.SharingRecordRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object SharingRecord {

	/**
	 * The reference instance of <code>sharing_record</code>
	 */
	val SHARING_RECORD = new SharingRecord
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class SharingRecord(alias : String, aliased : Table[SharingRecordRecord], parameters : Array[ Field[_] ]) extends TableImpl[SharingRecordRecord](alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[SharingRecordRecord] = {
		classOf[SharingRecordRecord]
	}

	/**
	 * The column <code>sharing_record.id</code>.
	 */
	val ID : TableField[SharingRecordRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>sharing_record.folder_id</code>.
	 */
	val FOLDER_ID : TableField[SharingRecordRecord, Integer] = createField("folder_id", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>sharing_record.document_id</code>.
	 */
	val DOCUMENT_ID : TableField[SharingRecordRecord, Integer] = createField("document_id", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>sharing_record.shared_by</code>.
	 */
	val SHARED_BY : TableField[SharingRecordRecord, String] = createField("shared_by", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>sharing_record.shared_with</code>.
	 */
	val SHARED_WITH : TableField[SharingRecordRecord, String] = createField("shared_with", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>sharing_record.shared_at</code>.
	 */
	val SHARED_AT : TableField[SharingRecordRecord, OffsetDateTime] = createField("shared_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), "")

	/**
	 * The column <code>sharing_record.accepted</code>.
	 */
	val ACCEPTED : TableField[SharingRecordRecord, Boolean] = createField("accepted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), "")

	/**
	 * The column <code>sharing_record.revoked</code>.
	 */
	val REVOKED : TableField[SharingRecordRecord, Boolean] = createField("revoked", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), "")

	/**
	 * Create a <code>sharing_record</code> table reference
	 */
	def this() = {
		this("sharing_record", null, null)
	}

	/**
	 * Create an aliased <code>sharing_record</code> table reference
	 */
	def this(alias : String) = {
		this(alias, models.generated.tables.SharingRecord.SHARING_RECORD, null)
	}

	private def this(alias : String, aliased : Table[SharingRecordRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[SharingRecordRecord] = {
		Keys.PK_SHARING_RECORD
	}

	override def getKeys : List[ UniqueKey[SharingRecordRecord] ] = {
		return Arrays.asList[ UniqueKey[SharingRecordRecord] ](Keys.PK_SHARING_RECORD)
	}

	override def getReferences : List[ ForeignKey[SharingRecordRecord, _] ] = {
		return Arrays.asList[ ForeignKey[SharingRecordRecord, _] ](Keys.FK_SHARING_RECORD_FOLDER_1, Keys.FK_SHARING_RECORD_DOCUMENT_1, Keys.FK_SHARING_RECORD_USER_2, Keys.FK_SHARING_RECORD_USER_1)
	}

	override def as(alias : String) : SharingRecord = {
		new SharingRecord(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : SharingRecord = {
		new SharingRecord(name, null)
	}
}
