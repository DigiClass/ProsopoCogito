/**
 * This class is generated by jOOQ
 */
package models.generated.tables.records


import java.lang.String
import java.time.OffsetDateTime

import javax.annotation.Generated

import models.generated.tables.Users

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class UsersRecord extends UpdatableRecordImpl[UsersRecord](Users.USERS) with Record3[String, String, OffsetDateTime] {

	/**
	 * Setter for <code>users.username</code>.
	 */
	def setUsername(value : String) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>users.username</code>.
	 */
	def getUsername : String = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>users.email</code>.
	 */
	def setEmail(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>users.email</code>.
	 */
	def getEmail : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>users.member_since</code>.
	 */
	def setMemberSince(value : OffsetDateTime) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>users.member_since</code>.
	 */
	def getMemberSince : OffsetDateTime = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[OffsetDateTime]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[String] = {
		return super.key.asInstanceOf[ Record1[String] ]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[String, String, OffsetDateTime] = {
		super.fieldsRow.asInstanceOf[ Row3[String, String, OffsetDateTime] ]
	}

	override def valuesRow : Row3[String, String, OffsetDateTime] = {
		super.valuesRow.asInstanceOf[ Row3[String, String, OffsetDateTime] ]
	}
	override def field1 : Field[String] = Users.USERS.USERNAME
	override def field2 : Field[String] = Users.USERS.EMAIL
	override def field3 : Field[OffsetDateTime] = Users.USERS.MEMBER_SINCE
	override def value1 : String = getUsername
	override def value2 : String = getEmail
	override def value3 : OffsetDateTime = getMemberSince

	override def value1(value : String) : UsersRecord = {
		setUsername(value)
		this
	}

	override def value2(value : String) : UsersRecord = {
		setEmail(value)
		this
	}

	override def value3(value : OffsetDateTime) : UsersRecord = {
		setMemberSince(value)
		this
	}

	override def values(value1 : String, value2 : String, value3 : OffsetDateTime) : UsersRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised UsersRecord
	 */
	def this(username : String, email : String, memberSince : OffsetDateTime) = {
		this()

		setValue(0, username)
		setValue(1, email)
		setValue(2, memberSince)
	}
}
