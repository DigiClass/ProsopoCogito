/**
 * This class is generated by jOOQ
 */
package models.generated.tables.records


import java.lang.Boolean
import java.lang.String
import java.time.OffsetDateTime

import javax.annotation.Generated

import models.generated.tables.User

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class UserRecord extends UpdatableRecordImpl[UserRecord](User.USER) with Record6[String, String, String, String, OffsetDateTime, Boolean] {

	/**
	 * Setter for <code>user.username</code>.
	 */
	def setUsername(value : String) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>user.username</code>.
	 */
	def getUsername : String = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>user.email</code>.
	 */
	def setEmail(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>user.email</code>.
	 */
	def getEmail : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>user.password_hash</code>.
	 */
	def setPasswordHash(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>user.password_hash</code>.
	 */
	def getPasswordHash : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>user.salt</code>.
	 */
	def setSalt(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>user.salt</code>.
	 */
	def getSalt : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>user.member_since</code>.
	 */
	def setMemberSince(value : OffsetDateTime) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>user.member_since</code>.
	 */
	def getMemberSince : OffsetDateTime = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[OffsetDateTime]
	}

	/**
	 * Setter for <code>user.active</code>.
	 */
	def setActive(value : Boolean) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>user.active</code>.
	 */
	def getActive : Boolean = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Boolean]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[String] = {
		return super.key.asInstanceOf[ Record1[String] ]
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row6[String, String, String, String, OffsetDateTime, Boolean] = {
		super.fieldsRow.asInstanceOf[ Row6[String, String, String, String, OffsetDateTime, Boolean] ]
	}

	override def valuesRow : Row6[String, String, String, String, OffsetDateTime, Boolean] = {
		super.valuesRow.asInstanceOf[ Row6[String, String, String, String, OffsetDateTime, Boolean] ]
	}
	override def field1 : Field[String] = User.USER.USERNAME
	override def field2 : Field[String] = User.USER.EMAIL
	override def field3 : Field[String] = User.USER.PASSWORD_HASH
	override def field4 : Field[String] = User.USER.SALT
	override def field5 : Field[OffsetDateTime] = User.USER.MEMBER_SINCE
	override def field6 : Field[Boolean] = User.USER.ACTIVE
	override def value1 : String = getUsername
	override def value2 : String = getEmail
	override def value3 : String = getPasswordHash
	override def value4 : String = getSalt
	override def value5 : OffsetDateTime = getMemberSince
	override def value6 : Boolean = getActive

	override def value1(value : String) : UserRecord = {
		setUsername(value)
		this
	}

	override def value2(value : String) : UserRecord = {
		setEmail(value)
		this
	}

	override def value3(value : String) : UserRecord = {
		setPasswordHash(value)
		this
	}

	override def value4(value : String) : UserRecord = {
		setSalt(value)
		this
	}

	override def value5(value : OffsetDateTime) : UserRecord = {
		setMemberSince(value)
		this
	}

	override def value6(value : Boolean) : UserRecord = {
		setActive(value)
		this
	}

	override def values(value1 : String, value2 : String, value3 : String, value4 : String, value5 : OffsetDateTime, value6 : Boolean) : UserRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this
	}

	/**
	 * Create a detached, initialised UserRecord
	 */
	def this(username : String, email : String, passwordHash : String, salt : String, memberSince : OffsetDateTime, active : Boolean) = {
		this()

		setValue(0, username)
		setValue(1, email)
		setValue(2, passwordHash)
		setValue(3, salt)
		setValue(4, memberSince)
		setValue(5, active)
	}
}
