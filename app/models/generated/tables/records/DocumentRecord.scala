/**
 * This class is generated by jOOQ
 */
package models.generated.tables.records


import java.lang.Integer
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import models.generated.tables.Document

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class DocumentRecord extends UpdatableRecordImpl[DocumentRecord](Document.DOCUMENT) with Record9[Integer, String, String, String, Timestamp, String, String, String, String] {

	/**
	 * Setter for <code>document.id</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>document.id</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>document.owner</code>.
	 */
	def setOwner(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>document.owner</code>.
	 */
	def getOwner : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.author</code>.
	 */
	def setAuthor(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>document.author</code>.
	 */
	def getAuthor : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.title</code>.
	 */
	def setTitle(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>document.title</code>.
	 */
	def getTitle : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.date_numeric</code>.
	 */
	def setDateNumeric(value : Timestamp) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>document.date_numeric</code>.
	 */
	def getDateNumeric : Timestamp = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>document.date_freeform</code>.
	 */
	def setDateFreeform(value : String) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>document.date_freeform</code>.
	 */
	def getDateFreeform : String = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.description</code>.
	 */
	def setDescription(value : String) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>document.description</code>.
	 */
	def getDescription : String = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.source</code>.
	 */
	def setSource(value : String) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>document.source</code>.
	 */
	def getSource : String = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>document.language</code>.
	 */
	def setLanguage(value : String) : Unit = {
		setValue(8, value)
	}

	/**
	 * Getter for <code>document.language</code>.
	 */
	def getLanguage : String = {
		val r = getValue(8)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record9 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row9[Integer, String, String, String, Timestamp, String, String, String, String] = {
		super.fieldsRow.asInstanceOf[ Row9[Integer, String, String, String, Timestamp, String, String, String, String] ]
	}

	override def valuesRow : Row9[Integer, String, String, String, Timestamp, String, String, String, String] = {
		super.valuesRow.asInstanceOf[ Row9[Integer, String, String, String, Timestamp, String, String, String, String] ]
	}
	override def field1 : Field[Integer] = Document.DOCUMENT.ID
	override def field2 : Field[String] = Document.DOCUMENT.OWNER
	override def field3 : Field[String] = Document.DOCUMENT.AUTHOR
	override def field4 : Field[String] = Document.DOCUMENT.TITLE
	override def field5 : Field[Timestamp] = Document.DOCUMENT.DATE_NUMERIC
	override def field6 : Field[String] = Document.DOCUMENT.DATE_FREEFORM
	override def field7 : Field[String] = Document.DOCUMENT.DESCRIPTION
	override def field8 : Field[String] = Document.DOCUMENT.SOURCE
	override def field9 : Field[String] = Document.DOCUMENT.LANGUAGE
	override def value1 : Integer = getId
	override def value2 : String = getOwner
	override def value3 : String = getAuthor
	override def value4 : String = getTitle
	override def value5 : Timestamp = getDateNumeric
	override def value6 : String = getDateFreeform
	override def value7 : String = getDescription
	override def value8 : String = getSource
	override def value9 : String = getLanguage

	override def value1(value : Integer) : DocumentRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : DocumentRecord = {
		setOwner(value)
		this
	}

	override def value3(value : String) : DocumentRecord = {
		setAuthor(value)
		this
	}

	override def value4(value : String) : DocumentRecord = {
		setTitle(value)
		this
	}

	override def value5(value : Timestamp) : DocumentRecord = {
		setDateNumeric(value)
		this
	}

	override def value6(value : String) : DocumentRecord = {
		setDateFreeform(value)
		this
	}

	override def value7(value : String) : DocumentRecord = {
		setDescription(value)
		this
	}

	override def value8(value : String) : DocumentRecord = {
		setSource(value)
		this
	}

	override def value9(value : String) : DocumentRecord = {
		setLanguage(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String, value4 : String, value5 : Timestamp, value6 : String, value7 : String, value8 : String, value9 : String) : DocumentRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this.value7(value7)
		this.value8(value8)
		this.value9(value9)
		this
	}

	/**
	 * Create a detached, initialised DocumentRecord
	 */
	def this(id : Integer, owner : String, author : String, title : String, dateNumeric : Timestamp, dateFreeform : String, description : String, source : String, language : String) = {
		this()

		setValue(0, id)
		setValue(1, owner)
		setValue(2, author)
		setValue(3, title)
		setValue(4, dateNumeric)
		setValue(5, dateFreeform)
		setValue(6, description)
		setValue(7, source)
		setValue(8, language)
	}
}
