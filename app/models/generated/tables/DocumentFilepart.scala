/**
 * This class is generated by jOOQ
 */
package models.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import models.generated.DefaultSchema
import models.generated.Keys
import models.generated.tables.records.DocumentFilepartRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object DocumentFilepart {

	/**
	 * The reference instance of <code>document_filepart</code>
	 */
	val DOCUMENT_FILEPART = new DocumentFilepart
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class DocumentFilepart(alias : String, aliased : Table[DocumentFilepartRecord], parameters : Array[ Field[_] ]) extends TableImpl[DocumentFilepartRecord](alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[DocumentFilepartRecord] = {
		classOf[DocumentFilepartRecord]
	}

	/**
	 * The column <code>document_filepart.id</code>.
	 */
	val ID : TableField[DocumentFilepartRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>document_filepart.document_id</code>.
	 */
	val DOCUMENT_ID : TableField[DocumentFilepartRecord, String] = createField("document_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document_filepart.title</code>.
	 */
	val TITLE : TableField[DocumentFilepartRecord, String] = createField("title", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document_filepart.content_type</code>.
	 */
	val CONTENT_TYPE : TableField[DocumentFilepartRecord, String] = createField("content_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document_filepart.filename</code>.
	 */
	val FILENAME : TableField[DocumentFilepartRecord, String] = createField("filename", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>document_filepart.sequence_no</code>.
	 */
	val SEQUENCE_NO : TableField[DocumentFilepartRecord, Integer] = createField("sequence_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * Create a <code>document_filepart</code> table reference
	 */
	def this() = {
		this("document_filepart", null, null)
	}

	/**
	 * Create an aliased <code>document_filepart</code> table reference
	 */
	def this(alias : String) = {
		this(alias, models.generated.tables.DocumentFilepart.DOCUMENT_FILEPART, null)
	}

	private def this(alias : String, aliased : Table[DocumentFilepartRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[DocumentFilepartRecord] = {
		Keys.PK_DOCUMENT_FILEPART
	}

	override def getKeys : List[ UniqueKey[DocumentFilepartRecord] ] = {
		return Arrays.asList[ UniqueKey[DocumentFilepartRecord] ](Keys.PK_DOCUMENT_FILEPART)
	}

	override def getReferences : List[ ForeignKey[DocumentFilepartRecord, _] ] = {
		return Arrays.asList[ ForeignKey[DocumentFilepartRecord, _] ](Keys.FK_DOCUMENT_FILEPART_DOCUMENT_1)
	}

	override def as(alias : String) : DocumentFilepart = {
		new DocumentFilepart(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : DocumentFilepart = {
		new DocumentFilepart(name, null)
	}
}
