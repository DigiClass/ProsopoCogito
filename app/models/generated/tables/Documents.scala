/**
 * This class is generated by jOOQ
 */
package models.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import models.generated.DefaultSchema
import models.generated.Keys
import models.generated.tables.records.DocumentsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object Documents {

	/**
	 * The reference instance of <code>documents</code>
	 */
	val DOCUMENTS = new Documents
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class Documents(alias : String, aliased : Table[DocumentsRecord], parameters : Array[ Field[_] ]) extends TableImpl[DocumentsRecord](alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[DocumentsRecord] = {
		classOf[DocumentsRecord]
	}

	/**
	 * The column <code>documents.id</code>.
	 */
	val ID : TableField[DocumentsRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>documents.ownerid</code>.
	 */
	val OWNERID : TableField[DocumentsRecord, String] = createField("ownerid", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>documents.title</code>.
	 */
	val TITLE : TableField[DocumentsRecord, String] = createField("title", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), "")

	/**
	 * The column <code>documents.author</code>.
	 */
	val AUTHOR : TableField[DocumentsRecord, String] = createField("author", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>documents.description</code>.
	 */
	val DESCRIPTION : TableField[DocumentsRecord, String] = createField("description", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * The column <code>documents.language</code>.
	 */
	val LANGUAGE : TableField[DocumentsRecord, String] = createField("language", org.jooq.impl.SQLDataType.VARCHAR, "")

	/**
	 * Create a <code>documents</code> table reference
	 */
	def this() = {
		this("documents", null, null)
	}

	/**
	 * Create an aliased <code>documents</code> table reference
	 */
	def this(alias : String) = {
		this(alias, models.generated.tables.Documents.DOCUMENTS, null)
	}

	private def this(alias : String, aliased : Table[DocumentsRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[DocumentsRecord] = {
		Keys.PK_DOCUMENTS
	}

	override def getKeys : List[ UniqueKey[DocumentsRecord] ] = {
		return Arrays.asList[ UniqueKey[DocumentsRecord] ](Keys.PK_DOCUMENTS)
	}

	override def getReferences : List[ ForeignKey[DocumentsRecord, _] ] = {
		return Arrays.asList[ ForeignKey[DocumentsRecord, _] ](Keys.FK_DOCUMENTS_USERS_1)
	}

	override def as(alias : String) : Documents = {
		new Documents(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : Documents = {
		new Documents(name, null)
	}
}
