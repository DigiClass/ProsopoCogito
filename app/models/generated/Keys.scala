/**
 * This class is generated by jOOQ
 */
package models.generated


import java.lang.Integer

import javax.annotation.Generated

import models.generated.tables.Document
import models.generated.tables.DocumentFilepart
import models.generated.tables.Folder
import models.generated.tables.FolderAssociation
import models.generated.tables.SharingEventLog
import models.generated.tables.SharingPolicy
import models.generated.tables.Team
import models.generated.tables.TeamMembership
import models.generated.tables.Upload
import models.generated.tables.UploadFilepart
import models.generated.tables.User
import models.generated.tables.UserActivityLog
import models.generated.tables.UserActivityPerDay
import models.generated.tables.records.DocumentFilepartRecord
import models.generated.tables.records.DocumentRecord
import models.generated.tables.records.FolderAssociationRecord
import models.generated.tables.records.FolderRecord
import models.generated.tables.records.SharingEventLogRecord
import models.generated.tables.records.SharingPolicyRecord
import models.generated.tables.records.TeamMembershipRecord
import models.generated.tables.records.TeamRecord
import models.generated.tables.records.UploadFilepartRecord
import models.generated.tables.records.UploadRecord
import models.generated.tables.records.UserActivityLogRecord
import models.generated.tables.records.UserActivityPerDayRecord
import models.generated.tables.records.UserRecord

import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys


/**
 * A class modelling foreign key relationships between tables of the <code></code> 
 * schema
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
object Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	val IDENTITY_UPLOAD = Identities0.IDENTITY_UPLOAD

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	val PK_DOCUMENT = UniqueKeys0.PK_DOCUMENT
	val PK_DOCUMENT_FILEPART = UniqueKeys0.PK_DOCUMENT_FILEPART
	val PK_FOLDER = UniqueKeys0.PK_FOLDER
	val PK_SHARING_EVENT_LOG = UniqueKeys0.PK_SHARING_EVENT_LOG
	val PK_SHARING_POLICY = UniqueKeys0.PK_SHARING_POLICY
	val PK_TEAM = UniqueKeys0.PK_TEAM
	val PK_UPLOAD = UniqueKeys0.PK_UPLOAD
	val PK_UPLOAD_FILEPART = UniqueKeys0.PK_UPLOAD_FILEPART
	val PK_USER = UniqueKeys0.PK_USER
	val PK_USER_ACTIVITY_LOG = UniqueKeys0.PK_USER_ACTIVITY_LOG
	val PK_USER_ACTIVITY_PER_DAY = UniqueKeys0.PK_USER_ACTIVITY_PER_DAY

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	val FK_DOCUMENT_USER_1 = ForeignKeys0.FK_DOCUMENT_USER_1
	val FK_DOCUMENT_FILEPART_DOCUMENT_1 = ForeignKeys0.FK_DOCUMENT_FILEPART_DOCUMENT_1
	val FK_FOLDER_USER_1 = ForeignKeys0.FK_FOLDER_USER_1
	val FK_FOLDER_FOLDER_1 = ForeignKeys0.FK_FOLDER_FOLDER_1
	val FK_FOLDER_ASSOCIATION_FOLDER_1 = ForeignKeys0.FK_FOLDER_ASSOCIATION_FOLDER_1
	val FK_FOLDER_ASSOCIATION_DOCUMENT_1 = ForeignKeys0.FK_FOLDER_ASSOCIATION_DOCUMENT_1
	val FK_SHARING_EVENT_LOG_USER_1 = ForeignKeys0.FK_SHARING_EVENT_LOG_USER_1
	val FK_SHARING_EVENT_LOG_SHARING_POLICY_1 = ForeignKeys0.FK_SHARING_EVENT_LOG_SHARING_POLICY_1
	val FK_SHARING_POLICY_FOLDER_1 = ForeignKeys0.FK_SHARING_POLICY_FOLDER_1
	val FK_SHARING_POLICY_DOCUMENT_1 = ForeignKeys0.FK_SHARING_POLICY_DOCUMENT_1
	val FK_SHARING_POLICY_USER_2 = ForeignKeys0.FK_SHARING_POLICY_USER_2
	val FK_SHARING_POLICY_USER_1 = ForeignKeys0.FK_SHARING_POLICY_USER_1
	val FK_TEAM_USER_1 = ForeignKeys0.FK_TEAM_USER_1
	val FK_TEAM_MEMBERSHIP_USER_1 = ForeignKeys0.FK_TEAM_MEMBERSHIP_USER_1
	val FK_TEAM_MEMBERSHIP_TEAM_1 = ForeignKeys0.FK_TEAM_MEMBERSHIP_TEAM_1
	val FK_UPLOAD_USER_1 = ForeignKeys0.FK_UPLOAD_USER_1
	val FK_UPLOAD_FILEPART_UPLOAD_1 = ForeignKeys0.FK_UPLOAD_FILEPART_UPLOAD_1
	val FK_USER_ACTIVITY_LOG_USER_1 = ForeignKeys0.FK_USER_ACTIVITY_LOG_USER_1
	val FK_USER_ACTIVITY_PER_DAY_USER_1 = ForeignKeys0.FK_USER_ACTIVITY_PER_DAY_USER_1

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private object Identities0 extends AbstractKeys {
		val IDENTITY_UPLOAD : Identity[UploadRecord, Integer] = AbstractKeys.createIdentity(Upload.UPLOAD, Upload.UPLOAD.ID)
	}

	private object UniqueKeys0 extends AbstractKeys {
		val PK_DOCUMENT : UniqueKey[DocumentRecord] = AbstractKeys.createUniqueKey(Document.DOCUMENT, Document.DOCUMENT.ID)
		val PK_DOCUMENT_FILEPART : UniqueKey[DocumentFilepartRecord] = AbstractKeys.createUniqueKey(DocumentFilepart.DOCUMENT_FILEPART, DocumentFilepart.DOCUMENT_FILEPART.ID)
		val PK_FOLDER : UniqueKey[FolderRecord] = AbstractKeys.createUniqueKey(Folder.FOLDER, Folder.FOLDER.ID)
		val PK_SHARING_EVENT_LOG : UniqueKey[SharingEventLogRecord] = AbstractKeys.createUniqueKey(SharingEventLog.SHARING_EVENT_LOG, SharingEventLog.SHARING_EVENT_LOG.ID)
		val PK_SHARING_POLICY : UniqueKey[SharingPolicyRecord] = AbstractKeys.createUniqueKey(SharingPolicy.SHARING_POLICY, SharingPolicy.SHARING_POLICY.ID)
		val PK_TEAM : UniqueKey[TeamRecord] = AbstractKeys.createUniqueKey(Team.TEAM, Team.TEAM.TITLE)
		val PK_UPLOAD : UniqueKey[UploadRecord] = AbstractKeys.createUniqueKey(Upload.UPLOAD, Upload.UPLOAD.ID)
		val PK_UPLOAD_FILEPART : UniqueKey[UploadFilepartRecord] = AbstractKeys.createUniqueKey(UploadFilepart.UPLOAD_FILEPART, UploadFilepart.UPLOAD_FILEPART.ID)
		val PK_USER : UniqueKey[UserRecord] = AbstractKeys.createUniqueKey(User.USER, User.USER.USERNAME)
		val PK_USER_ACTIVITY_LOG : UniqueKey[UserActivityLogRecord] = AbstractKeys.createUniqueKey(UserActivityLog.USER_ACTIVITY_LOG, UserActivityLog.USER_ACTIVITY_LOG.ID)
		val PK_USER_ACTIVITY_PER_DAY : UniqueKey[UserActivityPerDayRecord] = AbstractKeys.createUniqueKey(UserActivityPerDay.USER_ACTIVITY_PER_DAY, UserActivityPerDay.USER_ACTIVITY_PER_DAY.ID)
	}

	private object ForeignKeys0 extends AbstractKeys {
		val FK_DOCUMENT_USER_1 : ForeignKey[DocumentRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, Document.DOCUMENT, Document.DOCUMENT.OWNER)
		val FK_DOCUMENT_FILEPART_DOCUMENT_1 : ForeignKey[DocumentFilepartRecord, DocumentRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_DOCUMENT, DocumentFilepart.DOCUMENT_FILEPART, DocumentFilepart.DOCUMENT_FILEPART.DOCUMENT_ID)
		val FK_FOLDER_USER_1 : ForeignKey[FolderRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, Folder.FOLDER, Folder.FOLDER.OWNER)
		val FK_FOLDER_FOLDER_1 : ForeignKey[FolderRecord, FolderRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_FOLDER, Folder.FOLDER, Folder.FOLDER.PARENT)
		val FK_FOLDER_ASSOCIATION_FOLDER_1 : ForeignKey[FolderAssociationRecord, FolderRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_FOLDER, FolderAssociation.FOLDER_ASSOCIATION, FolderAssociation.FOLDER_ASSOCIATION.FOLDER_ID)
		val FK_FOLDER_ASSOCIATION_DOCUMENT_1 : ForeignKey[FolderAssociationRecord, DocumentRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_DOCUMENT, FolderAssociation.FOLDER_ASSOCIATION, FolderAssociation.FOLDER_ASSOCIATION.DOCUMENT_ID)
		val FK_SHARING_EVENT_LOG_USER_1 : ForeignKey[SharingEventLogRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, SharingEventLog.SHARING_EVENT_LOG, SharingEventLog.SHARING_EVENT_LOG.ACTION_BY)
		val FK_SHARING_EVENT_LOG_SHARING_POLICY_1 : ForeignKey[SharingEventLogRecord, SharingPolicyRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_SHARING_POLICY, SharingEventLog.SHARING_EVENT_LOG, SharingEventLog.SHARING_EVENT_LOG.POLICY_ID)
		val FK_SHARING_POLICY_FOLDER_1 : ForeignKey[SharingPolicyRecord, FolderRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_FOLDER, SharingPolicy.SHARING_POLICY, SharingPolicy.SHARING_POLICY.FOLDER_ID)
		val FK_SHARING_POLICY_DOCUMENT_1 : ForeignKey[SharingPolicyRecord, DocumentRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_DOCUMENT, SharingPolicy.SHARING_POLICY, SharingPolicy.SHARING_POLICY.DOCUMENT_ID)
		val FK_SHARING_POLICY_USER_2 : ForeignKey[SharingPolicyRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, SharingPolicy.SHARING_POLICY, SharingPolicy.SHARING_POLICY.SHARED_BY)
		val FK_SHARING_POLICY_USER_1 : ForeignKey[SharingPolicyRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, SharingPolicy.SHARING_POLICY, SharingPolicy.SHARING_POLICY.SHARED_WITH)
		val FK_TEAM_USER_1 : ForeignKey[TeamRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, Team.TEAM, Team.TEAM.CREATED_BY)
		val FK_TEAM_MEMBERSHIP_USER_1 : ForeignKey[TeamMembershipRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, TeamMembership.TEAM_MEMBERSHIP, TeamMembership.TEAM_MEMBERSHIP.USERNAME)
		val FK_TEAM_MEMBERSHIP_TEAM_1 : ForeignKey[TeamMembershipRecord, TeamRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_TEAM, TeamMembership.TEAM_MEMBERSHIP, TeamMembership.TEAM_MEMBERSHIP.TEAM)
		val FK_UPLOAD_USER_1 : ForeignKey[UploadRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, Upload.UPLOAD, Upload.UPLOAD.OWNER)
		val FK_UPLOAD_FILEPART_UPLOAD_1 : ForeignKey[UploadFilepartRecord, UploadRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_UPLOAD, UploadFilepart.UPLOAD_FILEPART, UploadFilepart.UPLOAD_FILEPART.UPLOAD_ID)
		val FK_USER_ACTIVITY_LOG_USER_1 : ForeignKey[UserActivityLogRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, UserActivityLog.USER_ACTIVITY_LOG, UserActivityLog.USER_ACTIVITY_LOG.USERNAME)
		val FK_USER_ACTIVITY_PER_DAY_USER_1 : ForeignKey[UserActivityPerDayRecord, UserRecord] = AbstractKeys.createForeignKey(models.generated.Keys.PK_USER, UserActivityPerDay.USER_ACTIVITY_PER_DAY, UserActivityPerDay.USER_ACTIVITY_PER_DAY.USERNAME)
	}
}
